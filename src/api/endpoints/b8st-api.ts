/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * B8boost API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  UsecaseClosedEventsOutput,
  UsecaseLoginOutput,
  UsecaseUpcomingEventList,
  UsecaseUserMeOutput,
} from "../model";
import { requestInstance } from "./axios-instance";
import type { ErrorType } from "./axios-instance";

/**
 * @summary get archived events
 */
export const getEventsArchived = (signal?: AbortSignal) => {
  return requestInstance<UsecaseClosedEventsOutput>({
    url: `/events/archived`,
    method: "GET",
    signal,
  });
};

export const getGetEventsArchivedQueryKey = () => {
  return [`/events/archived`] as const;
};

export const getGetEventsArchivedQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsArchivedQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventsArchived>>
  > = ({ signal }) => getEventsArchived(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsArchived>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetEventsArchivedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventsArchived>>
>;
export type GetEventsArchivedQueryError = ErrorType<void>;

export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEventsArchived>>,
        TError,
        Awaited<ReturnType<typeof getEventsArchived>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEventsArchived>>,
        TError,
        Awaited<ReturnType<typeof getEventsArchived>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get archived events
 */

export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventsArchivedQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary get upcoming events
 */
export const getEventsUpcoming = (signal?: AbortSignal) => {
  return requestInstance<UsecaseUpcomingEventList>({
    url: `/events/upcoming`,
    method: "GET",
    signal,
  });
};

export const getGetEventsUpcomingQueryKey = () => {
  return [`/events/upcoming`] as const;
};

export const getGetEventsUpcomingQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsUpcoming>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsUpcomingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventsUpcoming>>
  > = ({ signal }) => getEventsUpcoming(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsUpcoming>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetEventsUpcomingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventsUpcoming>>
>;
export type GetEventsUpcomingQueryError = ErrorType<void>;

export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsUpcoming>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEventsUpcoming>>,
        TError,
        Awaited<ReturnType<typeof getEventsUpcoming>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsUpcoming>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEventsUpcoming>>,
        TError,
        Awaited<ReturnType<typeof getEventsUpcoming>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsUpcoming>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get upcoming events
 */

export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsUpcoming>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventsUpcomingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary login with telegram
 */
export const postLogin = (signal?: AbortSignal) => {
  return requestInstance<UsecaseLoginOutput>({
    url: `/login`,
    method: "POST",
    signal,
  });
};

export const getPostLoginMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    void
  > = () => {
    return postLogin();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;

export type PostLoginMutationError = ErrorType<void>;

/**
 * @summary login with telegram
 */
export const usePostLogin = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary get user me
 */
export const getUsersMe = (signal?: AbortSignal) => {
  return requestInstance<UsecaseUserMeOutput>({
    url: `/users/me`,
    method: "GET",
    signal,
  });
};

export const getGetUsersMeQueryKey = () => {
  return [`/users/me`] as const;
};

export const getGetUsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({
    signal,
  }) => getUsersMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersMe>>
>;
export type GetUsersMeQueryError = ErrorType<void>;

export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersMe>>,
        TError,
        Awaited<ReturnType<typeof getUsersMe>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersMe>>,
        TError,
        Awaited<ReturnType<typeof getUsersMe>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get user me
 */

export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
