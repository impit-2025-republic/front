/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * B8boost API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AiStreamResponse,
  GetEventsUpcomingParams,
  UsecaseAdminVisitEventInput,
  UsecaseBuyProductInput,
  UsecaseCaseOpenInput,
  UsecaseCaseOpenOutput,
  UsecaseClosedEventsOutput,
  UsecaseFindProductOutput,
  UsecaseGetMyHistoryWalletOutput,
  UsecaseLLMChatInput,
  UsecaseLoginOutput,
  UsecaseTopBalanceOutput,
  UsecaseUpcomingEventList,
  UsecaseUserMeOutput,
  UsecaseVisitEventInput,
} from "../model";
import { requestInstance } from "./axios-instance";
import type { ErrorType } from "./axios-instance";

/**
 * @summary admin visit event
 */
export const postAdminEventsVisit = (
  usecaseAdminVisitEventInput: UsecaseAdminVisitEventInput,
  signal?: AbortSignal,
) => {
  return requestInstance<void>({
    url: `/admin/events/visit`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: usecaseAdminVisitEventInput,
    signal,
  });
};

export const getPostAdminEventsVisitMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAdminEventsVisit>>,
    TError,
    { data: UsecaseAdminVisitEventInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAdminEventsVisit>>,
  TError,
  { data: UsecaseAdminVisitEventInput },
  TContext
> => {
  const mutationKey = ["postAdminEventsVisit"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAdminEventsVisit>>,
    { data: UsecaseAdminVisitEventInput }
  > = (props) => {
    const { data } = props ?? {};

    return postAdminEventsVisit(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAdminEventsVisitMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAdminEventsVisit>>
>;
export type PostAdminEventsVisitMutationBody = UsecaseAdminVisitEventInput;
export type PostAdminEventsVisitMutationError = ErrorType<void>;

/**
 * @summary admin visit event
 */
export const usePostAdminEventsVisit = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAdminEventsVisit>>,
    TError,
    { data: UsecaseAdminVisitEventInput },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAdminEventsVisit>>,
  TError,
  { data: UsecaseAdminVisitEventInput },
  TContext
> => {
  const mutationOptions = getPostAdminEventsVisitMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary get archived events
 */
export const getEventsArchived = (signal?: AbortSignal) => {
  return requestInstance<UsecaseClosedEventsOutput>({
    url: `/events/archived`,
    method: "GET",
    signal,
  });
};

export const getGetEventsArchivedQueryKey = () => {
  return [`/events/archived`] as const;
};

export const getGetEventsArchivedQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsArchivedQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventsArchived>>
  > = ({ signal }) => getEventsArchived(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsArchived>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetEventsArchivedQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventsArchived>>
>;
export type GetEventsArchivedQueryError = ErrorType<void>;

export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEventsArchived>>,
        TError,
        Awaited<ReturnType<typeof getEventsArchived>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getEventsArchived>>,
        TError,
        Awaited<ReturnType<typeof getEventsArchived>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get archived events
 */

export function useGetEventsArchived<
  TData = Awaited<ReturnType<typeof getEventsArchived>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getEventsArchived>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventsArchivedQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary get upcoming events
 */
export const getEventsUpcoming = (
  params?: GetEventsUpcomingParams,
  signal?: AbortSignal,
) => {
  return requestInstance<UsecaseUpcomingEventList>({
    url: `/events/upcoming`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetEventsUpcomingQueryKey = (
  params?: GetEventsUpcomingParams,
) => {
  return [`/events/upcoming`, ...(params ? [params] : [])] as const;
};

export const getGetEventsUpcomingQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(
  params?: GetEventsUpcomingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventsUpcoming>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetEventsUpcomingQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventsUpcoming>>
  > = ({ signal }) => getEventsUpcoming(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventsUpcoming>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetEventsUpcomingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventsUpcoming>>
>;
export type GetEventsUpcomingQueryError = ErrorType<void>;

export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(
  params: undefined | GetEventsUpcomingParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventsUpcoming>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsUpcoming>>,
          TError,
          Awaited<ReturnType<typeof getEventsUpcoming>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(
  params?: GetEventsUpcomingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventsUpcoming>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsUpcoming>>,
          TError,
          Awaited<ReturnType<typeof getEventsUpcoming>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(
  params?: GetEventsUpcomingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventsUpcoming>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get upcoming events
 */

export function useGetEventsUpcoming<
  TData = Awaited<ReturnType<typeof getEventsUpcoming>>,
  TError = ErrorType<void>,
>(
  params?: GetEventsUpcomingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventsUpcoming>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventsUpcomingQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary visit event
 */
export const postEventsVisit = (
  usecaseVisitEventInput: UsecaseVisitEventInput,
  signal?: AbortSignal,
) => {
  return requestInstance<void>({
    url: `/events/visit`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: usecaseVisitEventInput,
    signal,
  });
};

export const getPostEventsVisitMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEventsVisit>>,
    TError,
    { data: UsecaseVisitEventInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postEventsVisit>>,
  TError,
  { data: UsecaseVisitEventInput },
  TContext
> => {
  const mutationKey = ["postEventsVisit"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postEventsVisit>>,
    { data: UsecaseVisitEventInput }
  > = (props) => {
    const { data } = props ?? {};

    return postEventsVisit(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEventsVisitMutationResult = NonNullable<
  Awaited<ReturnType<typeof postEventsVisit>>
>;
export type PostEventsVisitMutationBody = UsecaseVisitEventInput;
export type PostEventsVisitMutationError = ErrorType<void>;

/**
 * @summary visit event
 */
export const usePostEventsVisit = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEventsVisit>>,
    TError,
    { data: UsecaseVisitEventInput },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postEventsVisit>>,
  TError,
  { data: UsecaseVisitEventInput },
  TContext
> => {
  const mutationOptions = getPostEventsVisitMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary chat with llm
 */
export const postLlm = (
  usecaseLLMChatInput: UsecaseLLMChatInput,
  signal?: AbortSignal,
) => {
  return requestInstance<AiStreamResponse>({
    url: `/llm`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: usecaseLLMChatInput,
    signal,
  });
};

export const getPostLlmMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLlm>>,
    TError,
    { data: UsecaseLLMChatInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLlm>>,
  TError,
  { data: UsecaseLLMChatInput },
  TContext
> => {
  const mutationKey = ["postLlm"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLlm>>,
    { data: UsecaseLLMChatInput }
  > = (props) => {
    const { data } = props ?? {};

    return postLlm(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLlmMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLlm>>
>;
export type PostLlmMutationBody = UsecaseLLMChatInput;
export type PostLlmMutationError = ErrorType<void>;

/**
 * @summary chat with llm
 */
export const usePostLlm = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLlm>>,
    TError,
    { data: UsecaseLLMChatInput },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLlm>>,
  TError,
  { data: UsecaseLLMChatInput },
  TContext
> => {
  const mutationOptions = getPostLlmMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary login with telegram
 */
export const postLogin = (signal?: AbortSignal) => {
  return requestInstance<UsecaseLoginOutput>({
    url: `/login`,
    method: "POST",
    signal,
  });
};

export const getPostLoginMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    void
  > = () => {
    return postLogin();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;

export type PostLoginMutationError = ErrorType<void>;

/**
 * @summary login with telegram
 */
export const usePostLogin = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary get products
 */
export const getProducts = (signal?: AbortSignal) => {
  return requestInstance<UsecaseFindProductOutput>({
    url: `/products`,
    method: "GET",
    signal,
  });
};

export const getGetProductsQueryKey = () => {
  return [`/products`] as const;
};

export const getGetProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({
    signal,
  }) => getProducts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProducts>>
>;
export type GetProductsQueryError = ErrorType<void>;

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        Awaited<ReturnType<typeof getProducts>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getProducts>>,
        TError,
        Awaited<ReturnType<typeof getProducts>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get products
 */

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary buy product
 */
export const postProductsBuy = (
  usecaseBuyProductInput: UsecaseBuyProductInput,
  signal?: AbortSignal,
) => {
  return requestInstance<void>({
    url: `/products/buy`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: usecaseBuyProductInput,
    signal,
  });
};

export const getPostProductsBuyMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsBuy>>,
    TError,
    { data: UsecaseBuyProductInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProductsBuy>>,
  TError,
  { data: UsecaseBuyProductInput },
  TContext
> => {
  const mutationKey = ["postProductsBuy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProductsBuy>>,
    { data: UsecaseBuyProductInput }
  > = (props) => {
    const { data } = props ?? {};

    return postProductsBuy(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProductsBuyMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProductsBuy>>
>;
export type PostProductsBuyMutationBody = UsecaseBuyProductInput;
export type PostProductsBuyMutationError = ErrorType<void>;

/**
 * @summary buy product
 */
export const usePostProductsBuy = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsBuy>>,
    TError,
    { data: UsecaseBuyProductInput },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postProductsBuy>>,
  TError,
  { data: UsecaseBuyProductInput },
  TContext
> => {
  const mutationOptions = getPostProductsBuyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary case open
 */
export const postProductsOpenCase = (
  usecaseCaseOpenInput: UsecaseCaseOpenInput,
  signal?: AbortSignal,
) => {
  return requestInstance<UsecaseCaseOpenOutput>({
    url: `/products/open/case`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: usecaseCaseOpenInput,
    signal,
  });
};

export const getPostProductsOpenCaseMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsOpenCase>>,
    TError,
    { data: UsecaseCaseOpenInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postProductsOpenCase>>,
  TError,
  { data: UsecaseCaseOpenInput },
  TContext
> => {
  const mutationKey = ["postProductsOpenCase"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postProductsOpenCase>>,
    { data: UsecaseCaseOpenInput }
  > = (props) => {
    const { data } = props ?? {};

    return postProductsOpenCase(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProductsOpenCaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof postProductsOpenCase>>
>;
export type PostProductsOpenCaseMutationBody = UsecaseCaseOpenInput;
export type PostProductsOpenCaseMutationError = ErrorType<void>;

/**
 * @summary case open
 */
export const usePostProductsOpenCase = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postProductsOpenCase>>,
    TError,
    { data: UsecaseCaseOpenInput },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postProductsOpenCase>>,
  TError,
  { data: UsecaseCaseOpenInput },
  TContext
> => {
  const mutationOptions = getPostProductsOpenCaseMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary get user me
 */
export const getUsersMe = (signal?: AbortSignal) => {
  return requestInstance<UsecaseUserMeOutput>({
    url: `/users/me`,
    method: "GET",
    signal,
  });
};

export const getGetUsersMeQueryKey = () => {
  return [`/users/me`] as const;
};

export const getGetUsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({
    signal,
  }) => getUsersMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersMe>>
>;
export type GetUsersMeQueryError = ErrorType<void>;

export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersMe>>,
        TError,
        Awaited<ReturnType<typeof getUsersMe>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersMe>>,
        TError,
        Awaited<ReturnType<typeof getUsersMe>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get user me
 */

export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary get top balance
 */
export const getUsersTop = (signal?: AbortSignal) => {
  return requestInstance<UsecaseTopBalanceOutput>({
    url: `/users/top`,
    method: "GET",
    signal,
  });
};

export const getGetUsersTopQueryKey = () => {
  return [`/users/top`] as const;
};

export const getGetUsersTopQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersTop>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersTop>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersTopQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersTop>>> = ({
    signal,
  }) => getUsersTop(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersTop>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersTopQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersTop>>
>;
export type GetUsersTopQueryError = ErrorType<void>;

export function useGetUsersTop<
  TData = Awaited<ReturnType<typeof getUsersTop>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersTop>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersTop>>,
        TError,
        Awaited<ReturnType<typeof getUsersTop>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersTop<
  TData = Awaited<ReturnType<typeof getUsersTop>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersTop>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersTop>>,
        TError,
        Awaited<ReturnType<typeof getUsersTop>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersTop<
  TData = Awaited<ReturnType<typeof getUsersTop>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersTop>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get top balance
 */

export function useGetUsersTop<
  TData = Awaited<ReturnType<typeof getUsersTop>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsersTop>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersTopQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary get my transaction
 */
export const getUsersTransactions = (signal?: AbortSignal) => {
  return requestInstance<UsecaseGetMyHistoryWalletOutput>({
    url: `/users/transactions`,
    method: "GET",
    signal,
  });
};

export const getGetUsersTransactionsQueryKey = () => {
  return [`/users/transactions`] as const;
};

export const getGetUsersTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersTransactions>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUsersTransactions>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersTransactionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersTransactions>>
  > = ({ signal }) => getUsersTransactions(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersTransactions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersTransactions>>
>;
export type GetUsersTransactionsQueryError = ErrorType<void>;

export function useGetUsersTransactions<
  TData = Awaited<ReturnType<typeof getUsersTransactions>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUsersTransactions>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersTransactions>>,
        TError,
        Awaited<ReturnType<typeof getUsersTransactions>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersTransactions<
  TData = Awaited<ReturnType<typeof getUsersTransactions>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUsersTransactions>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsersTransactions>>,
        TError,
        Awaited<ReturnType<typeof getUsersTransactions>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersTransactions<
  TData = Awaited<ReturnType<typeof getUsersTransactions>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUsersTransactions>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary get my transaction
 */

export function useGetUsersTransactions<
  TData = Awaited<ReturnType<typeof getUsersTransactions>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUsersTransactions>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersTransactionsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
