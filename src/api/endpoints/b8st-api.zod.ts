/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * B8boost API
 * OpenAPI spec version: 1.0
 */
import {
  z as zod
} from 'zod'

/**
 * @summary admin visit event
 */
export const postAdminEventsVisitBody = zod.object({
  "achievement_type_id": zod.number().optional(),
  "eventID": zod.number().optional(),
  "userID": zod.number().optional()
})


/**
 * @summary get archived events
 */
export const getEventsArchivedResponse = zod.object({
  "events": zod.array(zod.object({
  "achievementType": zod.object({
  "achievementTypeID": zod.number().optional(),
  "events": zod.array(zod.any()).optional(),
  "name": zod.string().optional()
}).optional(),
  "achievementTypeID": zod.number().optional(),
  "coin": zod.number().optional(),
  "company": zod.object({
  "company": zod.string().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "events": zod.array(zod.any()).optional(),
  "logo": zod.string().optional(),
  "products": zod.array(zod.object({
  "availability": zod.number().optional(),
  "caseTypeID": zod.number().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "image": zod.string().optional(),
  "name": zod.string().optional(),
  "price": zod.number().optional(),
  "productCategory": zod.string().optional(),
  "productID": zod.number().optional()
})).optional(),
  "title": zod.string().optional()
}).optional(),
  "companyID": zod.number().optional(),
  "createdAt": zod.string().optional(),
  "description": zod.string().optional(),
  "endDs": zod.string().optional(),
  "erpID": zod.number().optional(),
  "eventID": zod.number().optional(),
  "eventName": zod.string().optional(),
  "eventType": zod.string().optional(),
  "maxUsers": zod.number().optional(),
  "startDs": zod.string().optional(),
  "status": zod.string().optional(),
  "title": zod.string().optional()
})).optional()
})


/**
 * @summary get upcoming events
 */
export const getEventsUpcomingQueryParams = zod.object({
  "period": zod.string().optional()
})

export const getEventsUpcomingResponse = zod.object({
  "events": zod.array(zod.object({
  "achievementType": zod.object({
  "achievementTypeID": zod.number().optional(),
  "events": zod.array(zod.object({
  "achievementType": zod.any().optional(),
  "achievementTypeID": zod.number().optional(),
  "coin": zod.number().optional(),
  "company": zod.object({
  "company": zod.string().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "events": zod.array(zod.any()).optional(),
  "logo": zod.string().optional(),
  "products": zod.array(zod.object({
  "availability": zod.number().optional(),
  "caseTypeID": zod.number().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "image": zod.string().optional(),
  "name": zod.string().optional(),
  "price": zod.number().optional(),
  "productCategory": zod.string().optional(),
  "productID": zod.number().optional()
})).optional(),
  "title": zod.string().optional()
}).optional(),
  "companyID": zod.number().optional(),
  "createdAt": zod.string().optional(),
  "description": zod.string().optional(),
  "endDs": zod.string().optional(),
  "erpID": zod.number().optional(),
  "eventID": zod.number().optional(),
  "eventName": zod.string().optional(),
  "eventType": zod.string().optional(),
  "maxUsers": zod.number().optional(),
  "startDs": zod.string().optional(),
  "status": zod.string().optional(),
  "title": zod.string().optional()
})).optional(),
  "name": zod.string().optional()
}).optional(),
  "achievementTypeID": zod.number().optional(),
  "coin": zod.number().optional(),
  "company": zod.object({
  "company": zod.string().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "events": zod.array(zod.object({
  "achievementType": zod.object({
  "achievementTypeID": zod.number().optional(),
  "events": zod.array(zod.any()).optional(),
  "name": zod.string().optional()
}).optional(),
  "achievementTypeID": zod.number().optional(),
  "coin": zod.number().optional(),
  "company": zod.any().optional(),
  "companyID": zod.number().optional(),
  "createdAt": zod.string().optional(),
  "description": zod.string().optional(),
  "endDs": zod.string().optional(),
  "erpID": zod.number().optional(),
  "eventID": zod.number().optional(),
  "eventName": zod.string().optional(),
  "eventType": zod.string().optional(),
  "maxUsers": zod.number().optional(),
  "startDs": zod.string().optional(),
  "status": zod.string().optional(),
  "title": zod.string().optional()
})).optional(),
  "logo": zod.string().optional(),
  "products": zod.array(zod.object({
  "availability": zod.number().optional(),
  "caseTypeID": zod.number().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "image": zod.string().optional(),
  "name": zod.string().optional(),
  "price": zod.number().optional(),
  "productCategory": zod.string().optional(),
  "productID": zod.number().optional()
})).optional(),
  "title": zod.string().optional()
}).optional(),
  "companyID": zod.number().optional(),
  "createdAt": zod.string().optional(),
  "description": zod.string().optional(),
  "endDs": zod.string().optional(),
  "erpID": zod.number().optional(),
  "eventID": zod.number().optional(),
  "eventName": zod.string().optional(),
  "eventType": zod.string().optional(),
  "is_registered": zod.boolean().optional(),
  "maxUsers": zod.number().optional(),
  "startDs": zod.string().optional(),
  "status": zod.string().optional(),
  "title": zod.string().optional()
})).optional(),
  "total": zod.number().optional()
})


/**
 * @summary visit event
 */
export const postEventsVisitBody = zod.object({
  "eventID": zod.number().optional()
})


/**
 * @summary chat with llm
 */
export const postLlmBody = zod.object({
  "promnt": zod.string().optional()
})

export const postLlmResponse = zod.object({
  "choices": zod.array(zod.object({
  "finish_reason": zod.string().optional(),
  "index": zod.number().optional(),
  "logprobs": zod.string().optional(),
  "stop_reason": zod.string().optional(),
  "text": zod.string().optional()
})).optional(),
  "created": zod.number().optional(),
  "id": zod.string().optional(),
  "model": zod.string().optional(),
  "object": zod.string().optional(),
  "usage": zod.string().optional()
})


/**
 * @summary login with telegram
 */
export const postLoginResponse = zod.object({
  "token": zod.string().optional()
})


/**
 * @summary get products
 */
export const getProductsResponse = zod.object({
  "products": zod.array(zod.object({
  "availability": zod.number().optional(),
  "caseTypeID": zod.number().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "image": zod.string().optional(),
  "name": zod.string().optional(),
  "price": zod.number().optional(),
  "productCategory": zod.string().optional(),
  "productID": zod.number().optional()
})).optional()
})


/**
 * @summary buy product
 */
export const postProductsBuyBody = zod.object({
  "productId": zod.number().optional(),
  "userID": zod.number().optional()
})


/**
 * @summary case open
 */
export const postProductsOpenCaseBody = zod.object({
  "productId": zod.number().optional()
})

export const postProductsOpenCaseResponse = zod.object({
  "productID": zod.number().optional()
})


/**
 * @summary get user me
 */
export const getUsersMeResponse = zod.object({
  "birth_date": zod.string().optional(),
  "coin": zod.number().optional(),
  "email": zod.string().optional(),
  "events": zod.array(zod.object({
  "achievementType": zod.object({
  "achievementTypeID": zod.number().optional(),
  "events": zod.array(zod.any()).optional(),
  "name": zod.string().optional()
}).optional(),
  "achievementTypeID": zod.number().optional(),
  "coin": zod.number().optional(),
  "company": zod.object({
  "company": zod.string().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "events": zod.array(zod.any()).optional(),
  "logo": zod.string().optional(),
  "products": zod.array(zod.object({
  "availability": zod.number().optional(),
  "caseTypeID": zod.number().optional(),
  "companyID": zod.number().optional(),
  "description": zod.string().optional(),
  "image": zod.string().optional(),
  "name": zod.string().optional(),
  "price": zod.number().optional(),
  "productCategory": zod.string().optional(),
  "productID": zod.number().optional()
})).optional(),
  "title": zod.string().optional()
}).optional(),
  "companyID": zod.number().optional(),
  "createdAt": zod.string().optional(),
  "description": zod.string().optional(),
  "endDs": zod.string().optional(),
  "erpID": zod.number().optional(),
  "eventID": zod.number().optional(),
  "eventName": zod.string().optional(),
  "eventType": zod.string().optional(),
  "maxUsers": zod.number().optional(),
  "startDs": zod.string().optional(),
  "status": zod.string().optional(),
  "title": zod.string().optional()
})).optional(),
  "l_surname": zod.string().optional(),
  "name": zod.string().optional(),
  "phone": zod.string().optional(),
  "surname": zod.string().optional(),
  "user_id": zod.number().optional()
})


/**
 * @summary get my transaction
 */
export const getUsersTransactionsResponse = zod.object({
  "transactions": zod.array(zod.object({
  "coin": zod.number().optional(),
  "createdAt": zod.string().optional(),
  "description": zod.string().optional(),
  "id": zod.number().optional(),
  "refillType": zod.string().optional(),
  "userID": zod.number().optional()
})).optional()
})


